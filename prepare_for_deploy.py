#!/usr/bin/env python
"""
Deploy Helper Script for Premier League Analysis Dashboard

This script helps prepare your project for deployment to Streamlit Cloud
by checking for common issues and fixing them.

Run this script before pushing to GitHub to ensure smooth deployment.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

# ANSI color codes for terminal output
GREEN = "\033[92m"
YELLOW = "\033[93m"
RED = "\033[91m"
BOLD = "\033[1m"
RESET = "\033[0m"

def print_colored(text, color):
    """Print colored text to terminal."""
    print(f"{color}{text}{RESET}")

def print_header(text):
    """Print a formatted header."""
    print("\n" + "=" * 80)
    print_colored(f" {text} ", BOLD + GREEN)
    print("=" * 80)

def print_step(text):
    """Print a step in the process."""
    print_colored(f"\n➤ {text}", YELLOW)

def print_success(text):
    """Print a success message."""
    print_colored(f"  ✓ {text}", GREEN)

def print_error(text):
    """Print an error message."""
    print_colored(f"  ✗ {text}", RED)

def check_file_exists(filepath):
    """Check if a file exists."""
    return os.path.isfile(filepath)

def get_project_root():
    """Get the project root directory."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    return script_dir

def copy_requirements():
    """Copy requirements_cloud.txt to requirements.txt if needed."""
    project_root = get_project_root()
    cloud_reqs = os.path.join(project_root, "requirements_cloud.txt")
    std_reqs = os.path.join(project_root, "requirements.txt")
    
    if not check_file_exists(cloud_reqs):
        print_error("requirements_cloud.txt not found!")
        return False
    
    # Create backup of original requirements if it exists
    if check_file_exists(std_reqs):
        backup_path = os.path.join(project_root, "requirements.txt.backup")
        shutil.copy2(std_reqs, backup_path)
        print_success(f"Created backup of requirements.txt at {backup_path}")
    
    # Copy cloud requirements to standard requirements
    shutil.copy2(cloud_reqs, std_reqs)
    print_success("Updated requirements.txt with cloud-friendly dependencies")
    return True

def ensure_gitignore():
    """Make sure .gitignore excludes unnecessary files."""
    project_root = get_project_root()
    gitignore_path = os.path.join(project_root, ".gitignore")
    
    # Standard patterns to ignore for a Python/Streamlit project
    standard_ignores = [
        # Python
        "__pycache__/",
        "*.py[cod]",
        "*$py.class",
        "*.so",
        ".Python",
        "env/",
        "venv/",
        "ENV/",
        ".env",
        ".venv",
        "build/",
        "develop-eggs/",
        "dist/",
        "downloads/",
        "eggs/",
        ".eggs/",
        "lib/",
        "lib64/",
        "parts/",
        "sdist/",
        "var/",
        "*.egg-info/",
        ".installed.cfg",
        "*.egg",
        # Jupyter Notebooks
        ".ipynb_checkpoints",
        # Editor files
        ".idea/",
        ".vscode/",
        "*.swp",
        "*.swo",
        # OS specific
        ".DS_Store",
        "Thumbs.db",
        # Project specific
        "*.dll"
    ]
    
    if check_file_exists(gitignore_path):
        with open(gitignore_path, 'r') as f:
            current_ignores = f.read().splitlines()
        
        # Add missing patterns
        missing_patterns = [p for p in standard_ignores if p not in current_ignores]
        if missing_patterns:
            with open(gitignore_path, 'a') as f:
                f.write("\n# Added by deploy helper script\n")
                for pattern in missing_patterns:
                    f.write(f"{pattern}\n")
            print_success(f"Added {len(missing_patterns)} missing patterns to .gitignore")
        else:
            print_success(".gitignore is already complete")
    else:
        # Create new .gitignore
        with open(gitignore_path, 'w') as f:
            f.write("# Generated by deploy helper script\n")
            for pattern in standard_ignores:
                f.write(f"{pattern}\n")
        print_success("Created new .gitignore file")
    
    return True

def check_for_large_files():
    """Check for files larger than 100MB which GitHub will reject."""
    project_root = get_project_root()
    large_files = []
    
    print_step("Scanning for large files (>100MB) that GitHub might reject...")
    
    for root, dirs, files in os.walk(project_root):
        # Skip venv directory
        if "venv" in dirs:
            dirs.remove("venv")
        if ".git" in dirs:
            dirs.remove(".git")
            
        for file in files:
            file_path = os.path.join(root, file)
            try:
                size_mb = os.path.getsize(file_path) / (1024 * 1024)  # Convert to MB
                if size_mb > 100:
                    rel_path = os.path.relpath(file_path, project_root)
                    large_files.append((rel_path, size_mb))
            except (FileNotFoundError, PermissionError):
                pass
    
    if large_files:
        print_error("Found large files that might cause GitHub push issues:")
        for file_path, size in large_files:
            print_colored(f"  - {file_path} ({size:.2f}MB)", RED)
        print("\nConsider adding these files to .gitignore or use Git LFS.")
        return False
    else:
        print_success("No large files found that would cause GitHub issues")
        return True

def main():
    """Main function to prepare the project for deployment."""
    print_header("Premier League Analysis Dashboard - Deployment Helper")
    
    success = True
    
    print_step("Checking for cloud-friendly requirements...")
    if not copy_requirements():
        success = False
    
    print_step("Ensuring .gitignore is properly configured...")
    if not ensure_gitignore():
        success = False
    
    if not check_for_large_files():
        success = False
    
    if success:
        print_header("Project is ready for deployment!")
        print("You can now push to GitHub and deploy on Streamlit Cloud.")
        print("\nDeployment steps:")
        print("1. Commit your changes")
        print("2. Push to GitHub")
        print("3. Go to https://share.streamlit.io/ to deploy")
    else:
        print_colored("\nSome issues need to be addressed before deployment.", RED)
        print("Fix the errors above and run this script again.")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
